
** 자바스크립트 작성시 주의 사항 
1.대소문자 구분 

2.한줄에 하나의 명령문만 작성하는 것을 권장 

3. 명령문의 끝에 세미콜론은 생략이 가능한데 스크립트 줄 단위로 읽어서 실행하는데 
한번에 하나의 명령문만 읽어서 실행합니다.
한줄에 2개의 명령문이 있는 경우에는 ;으로 구분해야 합니다. 
;은 여기까지를 하나의 명령문으로 처리해 달라는 의미도 포함 

4.문자열은 작은 따옴표나 큰따옴표로 묶어서 표현 
작은 따옴표와 큰 따옴표는 동일한 기능인데 다른 따옴표 안에 사용될 때는 열고 닫는 것이 
명확해야 합니다. 

5.따옴표를 표현할 때는 제어문자처럼 \다음에 표현 

6.제어문자 사용 가능 
\n:줄바꿈
\t: 탭
\\:\
\':'
\" :"

7. 주석 
\\: 한줄주석 
/* ~ */:여러 줄 주석 

8.함수나 메소드도 하나의 데이터로 취급 
함수나 메소드이름: 함수나 메소드가 저장된 곳의 참조 
함수나 메소드이름(매개변수 나열): 함수나 메소드의 호출 
=>함수를 일급 객체로 취급 

9.자바의 키워드는 자바스크립트에서도 키워드 
keyword(예약어):프로그래밍 언어가 기능을 정의해 놓은 명령문 

10.identifier(식별자): 개발자가 기능을 정의해 놓은 명령문 
키워드는 사용할 수 없고 영문 대소문자 또는 _와 $로 시작해야하고 이후에는 숫자가 가능하며
공백이나_와$를 제외한 특수문자는 사용할 수 없음 

_로 시작하는 경우는 지역변수나 예약어를 만들 때 주로 이용 
최근의 프로그래밍언어에서는 _를 사용하지 않는 것을 권장 

11.변수의 생성과 사용 
변수이름=값:전역변수가 됩니다. 

var 변수이름 = 값 : 지역변수가 됩니다.

global variable:모든 영역에서 사용이 가능 
local variable:영역내에서만 사용이 가능 

memeber variavle:객체나 클래스가 소유한 변수인데 최근에는 member variable대신에 
attribute(속성)이나 field 또는 property라는 표현을 많이 사용 
attribute는 어떤 객체의 특성을 나타내기 위한 변수 

=>스크립트 언어들에서는 변수를 만들 때 자료형을 기재하지 않는 경우가 일반적이며 변수는 
데이터를 대입하지 않으면 undefined상태 
데이터를 대입할 때 자료형이 결정됩니다. - 동적 바인딩 
이게 가능한 이유는 모든 데이터가 참조형이기 때문입니다. 

** 데이터의 분류 
1.저장하는 데이터의 유형에 따른 분류 
1)value type :실제 데이터의 값을 저장 - 데이터 1개 
2) reference type: 데이터의 참조를 저장 - 데이터 0개 이상 
=>이런 분류가 되어있는 언어는 변수를 만들때 어떤 데이터를 저장해야 하는지 알아야 하기 
때문에 변수를 선언할 때 자료형을 먼저 기재 - 정적바인딩언어(C,Java,
C#...)
=>reference type만 존재하는 언어는 모든 데이터의 reference는 동일한 크기이기 
때문에 자료형을 먼저 기재할 필요가 없습니다. 
데이터를 대입할 때 자료형을 결정 - 동적 바인딩 언어 (Javascript, Python, R...) 

=>동적 바인딩처럼 사용하지만 정적바인딩을 하는 언어들이 있습니다. 
kotlin, swift 등의 언어 

=>정적 바인딩은 메모리 공간을 먼저 확보한 수 실행하기 때문에 실행속도가 빠르다
라는 장점이 있지만 변수를 한 번 만들면 다른 종류의 데이터는 대입이 안됩니다. 

int i =10;
i = 20.7; 에러 

var i=10;
i = 20.7; 에러가 안남 

=>이런 문제 때문에 객체지향언어에서는 변수와 메소드 선언 사이에 순서가 없지만 
변수를 먼저 선언하고 메소드를 선언합니다. 
변수 선언 구문을 최상단에 하는 것을 권장합니다. 

2.데이터의 변경여부에 따른 분류 
1)immutable: 변경이 불가능한 데이터(const, readonl 등)
=> 동시에 여러 곳에서 사용해도 아무런 문제가 발생하지 않음 

2)mutable : 변경이 가능한 데이터 
=>동시에 여러 곳에서 수정을 하게되면 문제가 발생할 수 있음 

3.데이터 개수에 따른 분류 
1)scala data:하나의 데이터 

2)vector data(Vollection): 0개 이상의 데이터 
=>알고리즘을 동원해서 기술 통계나 분석에 이용  


12. 기본자료형 
Number - 숫자 
String - 문자열 
Boolean - true또는 false 
null-참조하는 데이터가 없다 
undefined: 아직 변수가 만들어지지 않았거나 변수를 만들고 초기값을 대입하지 않는 것 

13.출력 
1)브라우저 콘솔에 출력: 브라우저 화면에는 보이지 않고 디버깅 할 때만 보임 
consol.log(출력할 내용) 

2)대화상자에 출력: 브라우저에서 팝업 창이 차단되어 있으면 출력되지 않음 
alert(출력할 내용) 

3)브라우저 화면에 출력 
document.write("출력할 내용"): 내용을 모아서 출력 
document.writeln("출력할 내용"): 내용을 바로 출력 
=>태그를 사용하면 태그가 적용이 됩니다. 
write를 사용할 때 하나의 태그를 분할해서 출력하면 태그가 적용이 안될 수 도 있습니다. 

14.문자와의 결합 
=>문자열은 +를 이용해서 결합 가능 
=>숫자나 boolean데이터도 문자열과 +를 이용해서 결합이 가능한데 결합의 결과는 문자열 

15.html문서에서의 CDATA 
 =>문서내에서 특정 내용을 있는 그대로 사용하라고 하는 예약어 
=>등호나 부등호 등을 그대로 사용하도록 하기 위해서 사용 
\\<![CDATA[
내용
//]]>

16.자료 형변환 (Type Casting)
1)문자열을 숫자로 변환:Number(숫자로 만들어진 문자열) 

2)문자열을 Boolean으로 변환:Boolean(boolean으로 된 문자열)

3)숫자나 Boolean또는 다른 객체를 문자열로 변환 
String(숫자나 Boolean 데이터) 
숫자나 Boolean데이터 + ""
다른 종류의 객체인 경우는 toString()의 결과를 이용 

toString 메소드는 객체를 문자열로 표현하는 메소드이고 출력하는 메소드에 객체를 대입하면 
자동으로 호출되는 메소드 입니다. 

** 연산자(Operator) 
1.증감 연산자 
=> ++, -- 
=>숫자 변수의 데이터를 1증가시키고 감소시키는 연산자 
=>변수의 앞에 사용 가능하고 뒤에 사용할 수 있습니다. 
=> 앞에 사용하면 변수의 값을 증감하고 명령어에 이용 
=>뒤에 사용하면 명령어에 이용하고 변수의 값을 증감  

2.산술연산자 
% : 실수에 사용하면 올바르지 않은 결과가 리턴 될 수 있음  
*,/ 
+,-
+는 문자열에 사용하면 결합 연산자 

3.비트연산자 
=>정수 데이터에 사용 
<<,>>: 왼쪽이나 오른쪽으로 n bit만큼 shift 
=>왼쪽으로 shift를 하게되면 2배 증가 
=>오른쪽 shift는 1/2 

&, |, ^(and, or, xor)
=>2진수로 변경해서 비트 단위로 연산한 후 결과는 다시 10진수로 리턴하는 연산자 
=>시스템 프로그래밍이나 그래픽 프로그래밍에서 많이 이용 

~: 1의 보수(1->0, 0->1) 

컴퓨터에게 음수는 양수의 2의 보수로 표현 
1의 보수 +1
-1: 모든 bit가 1 

4.관계 연산자
=>2개의 데이터를 비교해서 결과를 Boolean으로 리턴하는 연산자
>,<,<=,>=: 문자열에서도 사용 가능 
문자열의 경우는 첫글자부터 순서대로 비교해서 결과를 리턴 

=>항등연산자 
==: 동일성 여부를 비교하는 연산자인데 데이터의 타입이 다르더라도 값이 같으면 true 
===: 데이터의 값이 같더라도 데이터의 타입이 다르면 false 
!=: 다르다 

5. 논리 연산자 
=>Boolean 데이터끼리 연산을 해서 결과를 Boolean으로 리턴하는 연산자 

!(not): true-> false, false->true 

&&(and):2개의 결과가 모두 true일때만 true를 리턴하는 연산자로 첫번째 수식의 연산 결과가
false이면 두번째 수식을 수행하지 않고 false를 리턴 

||(or):2개의 결과가 모두 false일때만 false를 리턴하는 연산자로 첫번째 수식의 연산 결과가
true이면 두번째 수식을 수행하지 않고 true를 리턴 

6. 삼항 연산자
표현식?표현식이 true일 때 남는 데이터 : 표현식이 false일 때 남는 데이터 

7.할당 연산자
=>데이터를 변수에 대입하는 연산자 
변수 = 데이터 : 오른쪽의 데이터를 왼쪽의 변수에 대입하는 연산자  
변수 += 데이터: 변수의 데이터에 오른쪽의데이터를 +한 후 다시 변수에 대입하는 연산자 

8.new 연산자 
=>생성자를 호출해서 객체를 생성한 후 객체의 참조를 리턴하는 연산자 

9.this 
=>생성자나 메소드 내에서 객체 자신을 가리키는 참조 연산자 
=>스크립트 언어에서는 중요 

10.typeof
=>데이터의 자료형을 문자열로 리턴해주는 연산자 
=>typeof(데이터)로 표현해도 되는데 이렇게 사용하기 때문에 함수로 착각하는 경우가 있음 

11.delete연산자 
=>변수를 삭제하는 연산자 
delete 변수 또는 데이터: 변수 또는 데이터가 삭제되고 변수나 데이터느 undefined가 됩니다. 

12.instance of 연산자 
=>객체가 클래스로부터 만들어 진것인지 여부를 리턴하는 연산자 
객체 instance of 자료형 또는 클래스 
=> 객체가 자료형으로 만들어져 있으면 true 아니면 false를 리턴 
이러한 연산자는 디버거난 IDE를 만들때 사용하는 연산자 

13.in 연산자 
=>속성이나 데이터가 객체나 배열에 포함되어 있는지 여부를 리턴해주는 연산자 
속성이름 in 객체: 객체에 속성이 있으면 true 없으면 false 
=>자바스크립트에서는 위의 구문을 많이 사용하는데 이유는 브라우저별로 객체나 속성이 
다르기 때문입니다.

chrome에는 stopPropagation()이 있고 IE에는 없습니다. 

stopPropagation()형태로 바로 호출하면 chrome에서는 에러가 아니지만 IE에서는 에러가 됩니다.

if(stopPropagation in window){
    stopPropagation();
} 

** 제어문(Control Statement) 
=>명령의 흐름을 변경해주는 명령어 
=>자바스크립트에서는 숫자데이터도 0이면 false 그리고 0이 아닌 숫자는 true로 간주 
객체의 경우는 null이나 undefined가 아니면 true 그리고 null이나 undefined이면 false로 간주 

1.if 
1)단순 if: 표현식이 true인 경우에만 내용을 수행하도록 하는 것 
if(표현식){
        표현식이 true일 때 수행할 내용 ; 
}
=>표현식은 상수, 변수 ,연산식, 메소드 호출 구문 등  

2) if-else:표현식이 true일 때와 false일 때 다른 내용을 수행하도록 하는 것 
if(표현식){
    표현식이 true일 때 수행할 내용 ; 
} else {
    표현식이 false일 때 수행할 내용;
}

3)if - else if -else : 표현식을 비교해야 하는 조건이 여러 개일 때 사용 
if(표현식1){
       표현식1이 true일 때 수행할 내용; 
}else if(표현식 2){
       표현식2가 true일 때 수행할 내용; 
}...
else {
       표현식이 전부 false일 때 수행할 내용;
}

=>if와 else는 1번씩만 가능하고 else if는 여러개 가능 
else는 생략도 가능 

4) 주의할 점 
=>수행할 내용이 한줄일 때는 {} 생략 가능 
=>if 안에 다른 if 를 추가할 수 있는데 이때는 먼저 열린 if가 나중에 닫혀야 합니다. 
else 나 else if 의 매핑에 주의해야 합니다. 
=>(표현식); 의 형태가 만들어지면 표현식을 무시하고 {}안의 내용을 무조건 실행합니다. 
=> if 와 else if를 만들때 먼저 만든 표현식이 뒤에 만든 표현식을 포함하지 않도록 작성해야 합니다. 

if(score >= 90){
}else if(score >=95){
   // 도달할 수 없는 코드 
}
=> 이런 코드를 만들면 java에서는 unreachable code에러가 발생합니다. 
=>괄호를 생략할 수 있어도 가독성을 위해서는 괄호를 해주는 것이 좋습니다. 

2.switch
=>값에 의한 분기를 할 때 사용하는 제어문 
=>동일한 결과를 만드는 구문을 if가 아니라 switch로 만들면 일반적으로 속도가 빠릅니다. 
=>if는 배열처럼 순서대로 표현식을 수행하고 switch는 Map처럼 해싱을 이용하는 구조 
switch(표현식){
      case 값1:
            표현식의 결과가 값1일 때 수행할 내용;
             break;
      case 값2:
            표현식의 결과가 값2일 때 수행할 내용;
             break;
       ...
       default: 
            표현식의 결과가 매핑되지 않았을 때 수행할 내용 ; 
            break; 
}

=>switch의 표현식의 결과는 숫자나 문자열이어야 합니다. 
=>break를 생략하면 fall through(break를 만날때 까지 전부 수행) 

3.while 
=>표현식이 false가 될 때까지 {}안의 내용을 반복수행 
while(표현식){
	반복 수행할 내용 
}

4.do~while
=>표현식이 false가 될 때까지 자신의 앞에 있는 {}안의 내용을 반복 수행 
do{
      반복 수행할 내용
}while(표현식);

5.for 
1)for(처음 한번 수행되는 표현식;반복 여부를 판단할 표현식; 한번 수행하고 난 이후부터 수행할 식){
      수행할 내용
}

=>while과 동일한 용도로 사용 

2) for(임시변수 in 객체 또는 배열){
    반복 수행할 내용; 
}
=> 객체를 대입하면 객체의 속성이 임시변수에 순서대로 대입 
=> 배열을 대입하면 배열의 인덱스가 임시변수에 순서대로 대입 
=>자바스크립트에서는 객체가 어떤 속성을 가지고 있는지 확인할 때 document 를 확인하지 않고 
for를 이용해서 확인이 가능합니다. 

6.기타 제어문 
1)break 
=>switch나 while, do~while, for구문에서 빠져 나오기 위한 제어문 

2)continue 
=>while, do~while, for구문에서 아래 내용을 더 이상 수행하지 않고 다음 반복으로 넘어가기 위한 
제어문 

3) return 
=>함수나 메소드 안에서 함수나 메소드의 수행을 종료하고 함수나 메소드를 호출한 곳으로 제어권을 
이동시키는 제어문 

4)제어문 안에 제어문 사용이 가능 

5) sencha touch 같은 모바일 웹 프레임워크는 body에 하나의 태그도 작성하지 않고 script만으로 
화면을 구성하기도 합니다. 

**function 
=>자주 사용하는 코드를 하나의 이름으로 묶어서 이름만으로 호출해서 독립적으로 수행할 수 있도록 
해주는 코드의 집합 
=>javascript에서는 함수도 하나의 자료형 
=>함수라고 부를 때는 전역에 존재해서 아무 곳에서나 호출할 수 있는 경우이고 메소드라고 부를 때는 
함수가 클래스 안에 만들어져서 클래스나 객체를 통해서만 호출할 수 있는 경우 
1.함수의 종류
1)Maker Function : 브라우저가 제공하는 함수 
실행되는 브라우저에 따라 존재여부가 달라지게 됩니다. 

2)user Define Function(사용자 정의함수) : 개발자가 직접 만든 함수 
=> 자주 사용되는 코드를 모듈화 하기 위해서 생성 
=> 코드의 가독성을 높이기 위해서 역활 별로 분리하기 위해서 생성 

3)다른 언어에서는 2rd party function (다른 개발자가 만든 함수) 도 언급하는데 자바스크립크에서는 
node.js를 사용할 때만 언급 

2.함수의 정의 
1)
function 함수이름(매개변수 나열){
      함수의 내용; 
      return 데이터;
}

2)
함수명= function(매개변수 나열){
      함수의 내용; 
      return 데이터;
}

3.함수 호출 - 함수를 실행 
함수이름(매개변수를 대입);
=>return이 있는 경우에는 다른 함수의 매개변수로 사용할 수도 있고 변수에 결과를 대입할 수 있습 
니다. 
=>함수이름만 기재하면 이것은 함수를 호출하는 것이 아니고 함수가 작성된 곳의 참조를 의미합니다. 

4.argument(매개변수)
=>함수를 호출할 때 함수에게 넘겨주는 데이터 
=>parameter:클라이언트가 서버에게 넘겨주는 데이터 
=>자바스크립트 함수가 매개변수를 받고자 하면 함수를 선언할 때 ()안에 매개변수 이름만 기재하면 
됩니다. 
자료형을 기재하지 않습니다. 
=>함수를 호출할 때 함수에게 매개변수에 해당하는 값을 대입해서 호출해야 하는데 값을 대입하지 않
으면 그 매개변수의 값은 undefined가 됩니다. 
자바스크립트에서는 함수를 호출할 때는 뒤에서부터 매개변수를 생략할 수 있습니다. 
 























